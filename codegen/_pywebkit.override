/* -*- Mode: C; c-basic-offset: 4 -*- */
/*
 Copyright (C) 2010, Free Software Foundation

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

%%
headers
#include <Python.h>
%%
body
typedef struct {
    PyObject_HEAD
    void * ptr;
} PyDOMObject;

static PyObject *
DOMObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    PyDOMObject *self;

    self = (PyDOMObject *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->ptr = NULL;
    }

    return (PyObject *)self;
}

/*
static int
DOMObject_init(PyObject *self, PyObject *args, PyObject *kwds)
{
    static char *kwlist[] = { (char*)"ptr", NULL };
    long ptr = 0;

    if (! PyArg_ParseTupleAndKeywords(args, kwds, "|l", kwlist,
                                      &ptr))
    {
        ptr = 0;
    }
    ((PyDOMObject*)self)->ptr = (void*)ptr;
    return 0;
}
*/

static PyObject *
DOMObject_setptr(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"ptr", NULL };
    long ptr;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:shoddy.DOMObject.setptr",
                                     kwlist, &ptr))
        return NULL;

    self->ptr = (void*)ptr;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyMethodDef DOMObject_methods[] = {
    {"setptr", (PyCFunction)DOMObject_setptr, METH_VARARGS|METH_KEYWORDS,
     PyDoc_STR("set pointer")},
    {NULL,	NULL, NULL, NULL},
};


static PyTypeObject PyDOMObject_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                       /* ob_size */
    "webkit.DOMObject",   /* tp_name */
    sizeof(PyDOMObject),       /* tp_basicsize */
    0,                       /* tp_itemsize */
    0,                       /* tp_dealloc */
    0,                       /* tp_print */
    0,                       /* tp_getattr */
    0,                       /* tp_setattr */
    0,                       /* tp_compare */
    0,                       /* tp_repr */
    0,                       /* tp_as_number */
    0,                       /* tp_as_sequence */
    0,                       /* tp_as_mapping */
    0,                       /* tp_hash */
    0,                       /* tp_call */
    0,                       /* tp_str */
    0,                       /* tp_getattro */
    0,                       /* tp_setattro */
    0,                       /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT |
      Py_TPFLAGS_BASETYPE,   /* tp_flags */
    0,                       /* tp_doc */
    0,                       /* tp_traverse */
    0,                       /* tp_clear */
    0,                       /* tp_richcompare */
    0,                       /* tp_weaklistoffset */
    0,                       /* tp_iter */
    0,                       /* tp_iternext */
    DOMObject_methods,          /* tp_methods */
    0,                       /* tp_members */
    0,                       /* tp_getset */
    0,                       /* tp_base */
    0,                       /* tp_dict */
    0,                       /* tp_descr_get */
    0,                       /* tp_descr_set */
    0,                       /* tp_dictoffset */
    0,                       /* tp_init */
    0,                       /* tp_alloc */
    DOMObject_new,           /* tp_new */
    0,                       /* tp_free */
    0,                       /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */

};

static PyObject* PyDOMObject_new(PyTypeObject *type, void *ptr)
{
    PyDOMObject *v; 
    v = (PyDOMObject *)type->tp_alloc(type, 0);
    v->ptr = ptr;
    return (PyObject *) v;
}

/* python callback-wrapped event listener.  associates a python callback
   function with a c++ object of type "EventListener" so that 
*/

PyObject *WebKit::toPython(WebCore::Event *);

class PythonEventListener : public WebCore::EventListener {
public:
    static PassRefPtr<PythonEventListener> create(PyObject* callback)
    { return adoptRef(new PythonEventListener(callback)); }

    virtual void handleEvent(WebCore::ScriptExecutionContext*, WebCore::Event*);
    virtual bool operator==(const EventListener& other);
    static const PythonEventListener* cast(const EventListener* listener)
    {
        return listener->type() == PythonEventListenerType
            ? static_cast<const PythonEventListener*>(listener)
            : 0;
    }

private:
    PyObject *m_callback;
    PythonEventListener(PyObject *callback)
      : WebCore::EventListener(WebCore::EventListener::PythonEventListenerType)
      , m_callback(callback)
    {
        if (m_callback)
            Py_INCREF(m_callback);
    }
    ~PythonEventListener()
    {
        if (m_callback)
            Py_DECREF(m_callback);
    }
};

void PythonEventListener::handleEvent(WebCore::ScriptExecutionContext*,
                                      WebCore::Event* event)
{
    PyObject* pev = WebKit::toPython(event);
    PyObject* arglist = Py_BuildValue((char*)"(O)", pev);
    PyObject* result = PyEval_CallObject(m_callback, arglist);
    Py_DECREF(arglist);
    Py_DECREF(pev);
    if (result == NULL)
        return; /* Pass error back */
    /* Here maybe use the result */
    Py_DECREF(result);
    return;
}

bool PythonEventListener::operator==(const EventListener& listener)
{
    const PythonEventListener* pyEventListener;
    pyEventListener = PythonEventListener::cast(&listener);
    if (pyEventListener)
        return m_callback == pyEventListener->m_callback;

    return false;
}

extern "C" {

WebCore::EventListener*
webkit_create_python_event_listener(PyObject *callback)
{
    PassRefPtr<PythonEventListener> listener;
    PythonEventListener * p_listener;
    listener = PythonEventListener::create(callback);
    p_listener = WTF::getPtr(listener);
    p_listener->ref();
    return p_listener;
}

void webkit_delete_python_event_listener(WebCore::EventListener *l)
{
    l->deref(); /* XXX - results in delete due to refcount=0? */
    /*delete l;*/
}

} /* extern C */

%%
init
    Py_INCREF(&PyDOMObject_Type);
    PyModule_AddObject(m, "DOMObject", (PyObject *) &PyDOMObject_Type);

